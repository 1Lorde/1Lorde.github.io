{"version":3,"sources":["components/Loader.js","routes/PrivateRoute.js","routes/PublicRoute.js","App.js","serviceWorker.js","store.js","i18nextConf.js","index.js","helpers/user.js","helpers/role.js"],"names":["Loader","className","color","PrivateRoute","props","userRole","getUserRole","component","Component","allowedRoles","rest","render","isTempTokenExist","localStorage","getItem","to","includes","Roles","PublicRoute","restricted","isPermanentTokenExist","DefaultLayout","React","lazy","Login","ResetPassword","InputOtp","ClientRegister","Page404","Page401","App","userState","userDispatch","useReducer","userReducer","Suspense","fallback","Provider","value","exact","path","allRoles","Boolean","window","location","hostname","match","initialState","sidebarShow","store","createStore","state","type","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","EN","id","ID","fallbackLng","interpolation","escapeValue","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","UserStatus","TRY_TO_LOGIN","RESET_PASS","WAITING_FOR_OTP","AUTHORIZED","LOGGED_OUT","UserContext","createContext","action","status","temp_token","user","company","token","data","jwt_decode","exp","iat","e","clearLocalToken","removeItem","role","getKoperasiOwnerIdFromToken","koperasi_owner_id","KoperasiRoles","AdminRoles","Object","keys","map","key","adminRoles"],"mappings":"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","file":"static/js/main.37fb5f5a.chunk.js","sourcesContent":["import { CCol, CContainer, CRow, CSpinner } from '@coreui/react'\nimport React from 'react'\n\nconst Loader = () => {\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow>\n          <CCol className=\"d-flex justify-content-center\">\n            <CSpinner color=\"primary\" />\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\nexport default Loader\n","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\nimport { getUserRole, isTempTokenExist } from '../helpers/user'\nimport { Roles } from '../helpers/role'\n\nfunction PrivateRoute(props: RouteProps): React.ReactElement {\n  const userRole = getUserRole()\n  const { component: Component, allowedRoles, ...rest } = props\n\n  const render = () => {\n    if (isTempTokenExist() || !localStorage.getItem('token')) {\n      return <Redirect to=\"/login\" />\n    }\n\n    if (allowedRoles.includes(Roles[userRole])) {\n      return <Component {...rest} />\n    }\n\n    return <Redirect to=\"/401\" />\n  }\n\n  return <Route {...rest} render={render} />\n}\n\nexport default PrivateRoute\n","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\nimport { isPermanentTokenExist } from '../helpers/user'\n\ninterface PublicRouteProps {\n  restricted?: boolean;\n}\n\nfunction PublicRoute(props: PublicRouteProps & RouteProps): React.ReactElement {\n  const { component: Component, restricted = false, ...rest } = props\n\n  const render = (props) => {\n    if (isPermanentTokenExist() && restricted) {\n      return <Redirect to=\"/profile\" />\n    }\n\n    return <Component {...props} />\n  }\n\n  return <Route {...rest} render={render} />\n}\n\nexport default PublicRoute\n","import React, { useReducer } from 'react'\nimport { HashRouter, Switch } from 'react-router-dom'\nimport ReactNotification from 'react-notifications-component'\n\nimport './scss/style.scss'\nimport 'react-notifications-component/dist/theme.css'\nimport 'animate.css'\n\nimport PublicRoute from './routes/PublicRoute'\nimport PrivateRoute from './routes/PrivateRoute'\nimport Loader from './components/Loader'\nimport { UserContext, userReducer } from './helpers/user'\nimport { allRoles } from './helpers/role'\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst ResetPassword = React.lazy(() => import('./views/pages/reset_password/ResetPassword'))\nconst InputOtp = React.lazy(() => import('./views/pages/input_otp/InputOtp'))\nconst ClientRegister = React.lazy(() => import('./views/pages/client_register/ClientRegister'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page401 = React.lazy(() => import('./views/pages/page401/Page401'))\n\nexport default function App() {\n  const [userState, userDispatch] = useReducer(userReducer, {})\n\n  return (\n    <HashRouter>\n      <React.Suspense fallback={Loader()}>\n        <ReactNotification />\n        <UserContext.Provider value={{ userState, userDispatch }}>\n          <Switch>\n            <PublicRoute exact restricted component={Login} path=\"/login\" />\n            <PublicRoute exact restricted component={ResetPassword} path=\"/reset_password\" />\n            <PublicRoute exact component={InputOtp} path=\"/input_otp\" />\n            <PublicRoute exact component={ClientRegister} path=\"/register\" />\n            <PublicRoute exact component={Page404} path=\"/404\" />\n            <PublicRoute exact component={Page401} path=\"/401\" />\n            <PrivateRoute allowedRoles={allRoles()} component={DefaultLayout} path=\"/\" />\n          </Switch>\n        </UserContext.Provider>\n      </React.Suspense>\n    </HashRouter>\n  )\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return { ...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport EN from './locales/en.json'\nimport ID from './locales/id.json'\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    // the locales\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: EN,\n      },\n      id: {\n        translation: ID,\n      },\n    },\n    fallbackLng: false,\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n  })\n\nexport default i18n\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './i18nextConf'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createContext } from 'react'\nimport jwt_decode from 'jwt-decode'\n\nexport const UserStatus = {\n  TRY_TO_LOGIN: 'login',\n  RESET_PASS: 'reset',\n  WAITING_FOR_OTP: 'otp',\n  AUTHORIZED: 'authorized',\n  LOGGED_OUT: 'logout',\n}\n\nexport const UserContext = createContext()\n\nexport function userReducer(userState, action) {\n  if (action.type === 'request_login') {\n    userState = {\n      status: UserStatus.TRY_TO_LOGIN,\n      temp_token: action.temp_token,\n    }\n  } else if (action.type === 'request_otp') {\n    userState = {\n      status: UserStatus.WAITING_FOR_OTP,\n      user: action.user,\n      company: action.company,\n    }\n  } else if (action.type === 'login') {\n    userState = {\n      status: UserStatus.AUTHORIZED,\n      user: action.user,\n      company: action.company,\n    }\n  } else if (action.type === 'logout') {\n    userState = {\n      status: UserStatus.LOGGED_OUT,\n    }\n  } else if (action.type === 'request_reset') {\n    userState = {\n      status: UserStatus.RESET_PASS,\n      temp_token: action.temp_token,\n    }\n  }\n  return userState\n}\n\nconst TOKEN_EXPIRATION_TIME = 10800\n\nexport function isPermanentTokenExist() {\n  const token = localStorage.getItem('token')\n  if (token) {\n    try {\n      const data = jwt_decode(token)\n      return data.exp - data.iat > TOKEN_EXPIRATION_TIME\n    } catch (e) {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nexport function isTempTokenExist() {\n  const token = localStorage.getItem('token')\n  if (token) {\n    try {\n      const data = jwt_decode(token)\n      return data.exp - data.iat === TOKEN_EXPIRATION_TIME\n    } catch (e) {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nexport function clearLocalToken() {\n  localStorage.removeItem('token')\n}\n\nexport function getUserRole() {\n  try {\n    const token = jwt_decode(localStorage.getItem('token'))\n    return token.role\n  } catch (e) {\n    clearLocalToken()\n    return null\n  }\n}\n\nexport function getKoperasiOwnerIdFromToken() {\n  try {\n    const token = jwt_decode(localStorage.getItem('token'))\n    return token.koperasi_owner_id\n  } catch (e) {\n    return null\n  }\n}\n","export const Roles = {\n  'app-owner': 'App Owner',\n  'product-technical': 'Product & Technical',\n  'marketing-finance': 'Marketing & Finance',\n  'koperasi-owner': 'Koperasi Owner',\n  'credit-analyst': 'Credit Analyst',\n  'account-officer': 'Account Officer',\n}\n\nexport const KoperasiRoles = {\n  'koperasi-owner': 'Koperasi Owner',\n  'credit-analyst': 'Credit Analyst',\n  'account-officer': 'Account Officer',\n}\n\nexport const AdminRoles = {\n  'app-owner': 'App Owner',\n  'product-technical': 'Product & Technical',\n  'marketing-finance': 'Marketing & Finance',\n}\n\nexport function allRoles() {\n  return Object.keys(Roles).map(function (key) {\n    return Roles[key]\n  })\n}\n\nexport function adminRoles() {\n  return Object.keys(AdminRoles).map(function (key) {\n    return Roles[key]\n  })\n}\n\nexport function koperasiRoles() {\n  return Object.keys(KoperasiRoles).map(function (key) {\n    return Roles[key]\n  })\n}\n"],"sourceRoot":""}