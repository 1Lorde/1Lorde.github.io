{"version":3,"sources":["../node_modules/@coreui/icons/js/free/cil-check.js","../node_modules/@coreui/icons/js/free/cil-x-circle.js","views/client/client_list/ClientList.js","api/api_client.js","components/Table.js"],"names":["cilCheck","cilXCircle","ClientList","history","useHistory","hasLoaded","setHasLoaded","useState","clients","setClients","searchQuery","setSearchQuery","status","setStatus","sort","setSort","handleApprove","id","name","approveClient","then","data","ok","store","addNotification","info","console","log","danger","getStatusBadge","toLowerCase","className","color","shape","getApprovalBar","role","variant","size","onClick","icon","rejectClient","handleReject","useEffect","getClients","map","item","company","contact_wa_number","contact","wa_number","contact_name","dir_name","actions","push","cilPen","approval","columns","React","useMemo","Header","accessor","htmlFor","type","placeholder","onChange","e","target","value","length","Table","Loader","API_URL","getClient","axios","get","headers","authHeader","response","catch","reason","message","updateClient","clientId","client","put","contact_dir_name","address","registerClient","post","apiHeader","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","pageIndex","useTable","autoResetPageIndex","usePagination","hover","responsive","style","minWidth","headerGroup","index","getHeaderGroupProps","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","min","max","defaultValue","Number","width","align","disabled","pointerEvents"],"mappings":"gLAAO,MAAMA,EAAW,CAAC,UAAU,yYCAtBC,EAAa,CAAC,UAAU,4hB,uCCqRtBC,UA7PI,KACjB,MAAMC,EAAUC,eACTC,EAAWC,GAAgBC,sBAC3BC,EAASC,GAAcF,mBAAS,KAChCG,EAAaC,GAAkBJ,mBAAS,KACxCK,EAAQC,GAAaN,mBAAS,KAC9BO,EAAMC,GAAWR,mBAAS,IAEjC,SAASS,EAAcC,EAAIC,GACzBC,YAAcF,GAAIG,MAAMC,IAClBA,EAAKC,GACPC,QAAMC,gBAAgBC,YAAK,UAAYP,EAAO,yBAE9CQ,QAAQC,IAAIN,GACZE,QAAMC,gBAAgBI,YAAO,wBAgBnC,SAASC,EAAejB,GACtB,OAAQA,EAAOkB,eACb,IAAK,UACH,OACE,cAAC,IAAD,CAAQC,UAAU,OAAOC,MAAM,UAAUC,MAAM,eAA/C,SACGrB,IAGP,IAAK,WACH,OACE,cAAC,IAAD,CAAQmB,UAAU,OAAOC,MAAM,OAAOC,MAAM,eAA5C,SACGrB,IAGP,IAAK,SACH,OACE,cAAC,IAAD,CAAQmB,UAAU,OAAOC,MAAM,UAAUC,MAAM,eAA/C,SACGrB,IAGP,IAAK,SACH,OACE,cAAC,IAAD,CAAQmB,UAAU,OAAOC,MAAM,SAASC,MAAM,eAA9C,SACGrB,IAGP,QACE,OACE,cAAC,IAAD,CAAQmB,UAAU,OAAOC,MAAM,YAAYC,MAAM,eAAjD,sBAOR,SAASC,EAAetB,EAAQK,EAAIC,GAClC,OAAQN,GACN,IAAK,WACH,OACE,eAAC,IAAD,CAAcuB,KAAK,QAAQJ,UAAU,OAArC,UACE,cAAC,IAAD,CACEC,MAAM,UACNI,QAAQ,UACRC,KAAM,KACNC,QAAS,KACPtB,EAAcC,EAAIC,IALtB,SAQE,sBAAKa,UAAU,mCAAf,UACE,2CACA,cAAC,IAAD,CAAOQ,KAAMvC,EAAU+B,UAAU,cAGrC,cAAC,IAAD,CACEC,MAAM,SACNI,QAAQ,UACRC,KAAM,KACNC,QAAS,IApErB,SAAsBrB,EAAIC,GACxBsB,YAAavB,GAAIG,MAAMC,IACjBA,EAAKC,GACPC,QAAMC,gBAAgBC,YAAK,UAAYP,EAAO,yBAE9CQ,QAAQC,IAAIN,GACZE,QAAMC,gBAAgBI,YAAO,wBA8DRa,CAAaxB,EAAIC,GAJlC,SAME,sBAAKa,UAAU,mCAAf,UACE,0CACA,cAAC,IAAD,CAAOQ,KAAMtC,EAAY8B,UAAU,iBAK7C,IAAK,SACH,OACE,cAAC,IAAD,CACEC,MAAM,UACNI,QAAQ,UACRC,KAAM,KACNC,QAAS,IAAMtB,EAAcC,EAAIC,GAJnC,SAME,sBAAKa,UAAU,mCAAf,UACE,2CACA,cAAC,IAAD,CAAOQ,KAAMvC,EAAU+B,UAAU,cAIzC,QACE,OAAO,mBAAGA,UAAU,uBAAb,yBAIbW,qBAAU,KACRC,YAAWjC,EAAaE,EAAQE,GAAMM,MAAMC,IAC1CZ,EAAU,OACRY,QADQ,IACRA,OADQ,EACRA,EAAMuB,KAAKC,IACF,CACL3B,KAAM2B,EAAKC,QACXC,kBAAmBF,EAAKG,QAAQC,UAChCC,aAAcL,EAAKG,QAAQG,SAC3BvC,OAAQiB,EAAegB,EAAKjC,QAC5BwC,QACE,cAAC,IAAD,UACE,eAAC,IAAD,CACEpB,MAAM,OACNK,KAAM,KACNC,QAAS,IAAMnC,EAAQkD,KAAK,YAAcR,EAAK5B,IAHjD,UAKE,cAAC,IAAD,CAAOsB,KAAMe,IAAQvB,UAAU,SAC/B,6CAINwB,SAAUrB,EAAeW,EAAKjC,OAAOkB,cAAee,EAAK5B,GAAI4B,EAAKC,cAIxExC,GAAa,QAEd,CAACH,EAASO,EAAaE,EAAQE,IAElC,MAAM0C,EAAUC,IAAMC,SACpB,IAAM,CACJ,CACEC,OAAQ,eACRC,SAAU,QAEZ,CACED,OAAQ,kBACRC,SAAU,qBAEZ,CACED,OAAQ,gBACRC,SAAU,gBAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,GACRC,SAAU,aAGd,IAGF,OAAOvD,EACL,eAAC,IAAD,WACE,eAAC,IAAD,CAAM0B,UAAU,qBAAhB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAY8B,QAAQ,cAApB,oBACA,cAAC,IAAD,CACEC,KAAK,OACL7C,GAAG,cACH8C,YAAY,uBACZC,SAAWC,IACTtD,EAAesD,EAAEC,OAAOC,aAI9B,eAAC,IAAD,WACE,cAAC,IAAD,CAAYN,QAAQ,cAApB,oBACA,eAAC,IAAD,CACE5C,GAAG,cACH+C,SAAWC,IACTpD,EAAUoD,EAAEC,OAAOC,QAHvB,UAME,wBAAQA,MAAM,GAAd,iBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,SAAd,0BAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAYN,QAAQ,YAApB,qBACA,eAAC,IAAD,CACE5C,GAAG,YACH+C,SAAWC,IACTlD,EAAQkD,EAAEC,OAAOC,QAHrB,UAME,wBAAQA,MAAM,kBAAd,uCACA,wBAAQA,MAAM,iBAAd,uCACA,wBAAQA,MAAM,cAAd,sCACA,wBAAQA,MAAM,eAAd,uCACA,wBAAQA,MAAM,WAAd,8BACA,wBAAQA,MAAM,YAAd,+BACA,wBAAQA,MAAM,uBAAd,sCACA,wBAAQA,MAAM,wBAAd,uCACA,wBAAQA,MAAM,qBAAd,wCACA,wBAAQA,MAAM,sBAAd,+CAGJ,cAAC,IAAD,CAAMpC,UAAW,6BAAjB,SACE,cAAC,IAAD,CAASC,MAAM,UAAUM,QAAS,IAAMnC,EAAQkD,KAAK,aAArD,+BAKJ,uBACA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACG7C,EAAQ4D,OAAS,EAChB,cAACC,EAAA,EAAD,CAAOb,QAASA,EAASnC,KAAMb,IAE/B,mCACE,qBAAKuB,UAAU,gCAAf,SACE,cAAC,IAAD,4CASduC,gB,iCCjRJ,2OAGA,MAAMC,EAAU,2BAET,SAASC,EAAUvD,GACxB,OAAOwD,IACJC,IAAIH,EAAU,uBAAyBtD,EAAI,CAAE0D,QAASC,gBACtDxD,MAAMyD,GACEA,EAASxD,KAAKA,OAEtByD,OAAOC,IACN,GAA+B,MAA3BA,EAAOF,SAASjE,OAElB,OADAc,QAAQC,IAAIoD,EAAOC,SACZ,QAKR,SAASC,EAAaC,EAAUC,GACrC,OAAOV,IACJW,IACCb,EAAU,uBAAyBW,EACnC,CACEpC,QAASqC,EAAOrC,QAChBuC,iBAAkBF,EAAOnC,QAAQG,SACjCmC,QAASH,EAAOG,SAElB,CACEX,QAASC,gBAGZxD,MAAMyD,GACEA,EAASxD,OAEjByD,OAAOC,GACCA,EAAOF,SAASxD,OAItB,SAASkE,EAAeJ,GAC7B,OAAOV,IACJe,KAAKjB,EAAU,0BAA2BY,EAAQ,CACjDR,QAASc,gBAEVrE,MAAMyD,GACEA,EAASxD,OAEjByD,OAAOC,GACCA,EAAOF,SAASxD,OAItB,SAASF,EAAc+D,GAI5B,OAAOT,IACJW,IAAIb,EAAU,8BAAgCW,EAJlC,CACbtE,OAAQ,UAGyD,CAC/D+D,QAASC,gBAEVxD,MAAMyD,GACEA,EAASxD,OAEjByD,OAAOC,GACCA,EAAOF,SAASxD,OAItB,SAASmB,EAAa0C,GAI3B,OAAOT,IACJW,IAAIb,EAAU,8BAAgCW,EAJlC,CACbtE,OAAQ,UAGyD,CAC/D+D,QAASC,gBAEVxD,MAAMyD,GACEA,EAASxD,OAEjByD,OAAOC,GACCA,EAAOF,SAASxD,OAItB,SAASsB,EAAWjC,EAAaE,EAAQE,GAG9C,MAFa,KAATA,IAAaA,EAAO,mBAEjB2D,IACJC,IACCH,EAAU,8BAAgC7D,EAAc,WAAaE,EAAS,SAAWE,EACzF,CAAE6D,QAASC,gBAEZxD,MAAMyD,GACEA,EAASxD,KAAKA,OAEtByD,OAAOC,IACN,GAA+B,MAA3BA,EAAOF,SAASjE,OAElB,OADAc,QAAQC,IAAIoD,EAAOC,SACZ,U,iCCnGf,qEAiBO,SAASX,GAAM,QAAEb,EAAF,KAAWnC,IAC/B,MAAM,cACJqE,EADI,kBAEJC,EAFI,aAGJC,EAHI,WAIJC,EAJI,KAKJC,EALI,gBAMJC,EANI,YAOJC,EAPI,YAQJC,EARI,UASJC,EATI,SAUJC,EAVI,SAWJC,EAXI,aAYJC,EACAC,OAAO,UAAEC,IACPC,mBAAS,CAAEhD,UAASnC,OAAMoF,oBAAoB,GAAQC,iBAE1D,OACE,qCACE,eAAC,KAAD,CAAQC,OAAK,EAACC,YAAU,EAACC,MAAO,CAAEC,SAAU,YAAepB,IAA3D,UACE,cAAC,KAAD,UACGE,EAAahD,KAAI,CAACmE,EAAaC,IAC9B,cAAC,KAAD,IAA2BD,EAAYE,sBAAvC,SACGF,EAAYpC,QAAQ/B,KAAI,CAACsE,EAAQF,IAChC,cAAC,KAAD,IAAkCE,EAAOC,iBAAzC,SACGD,EAAOE,OAAO,WADMJ,MAFXA,OASpB,cAAC,KAAD,IAAgBrB,IAAhB,SACGG,EAAKlD,KAAI,CAACyE,EAAKL,KACdnB,EAAWwB,GAET,cAAC,KAAD,IAA2BA,EAAIC,cAA/B,SACGD,EAAIE,MAAM3E,KAAI,CAAC4E,EAAMR,IAElB,cAAC,KAAD,IAAgCQ,EAAKC,eAArC,SACGD,EAAKJ,OAAO,SADMJ,MAHXA,WAcxB,eAAC,IAAD,CAAYjF,UAAW,gDAAvB,UACE,cAAC,IAAD,CAAaA,UAAW,OAAxB,yBACA,cAAC,IAAD,CACE2F,IAAK,EACLC,IAAKzB,EACLpC,KAAK,SACL8D,aAAcrB,EAAY,EAC1BvC,SAAWC,IACT,MAAM6B,EAAO7B,EAAEC,OAAOC,MAAQ0D,OAAO5D,EAAEC,OAAOC,OAAS,EAAI,EAC3DgC,EAASL,IAEXe,MAAO,CAAEiB,MAAO,cAIpB,eAAC,IAAD,CAAaC,MAAM,SAAS,aAAW,kBAAvC,UACE,cAAC,IAAD,CAAiB,aAAW,QAAQzF,QAAS,IAAM6D,EAAS,GAAI6B,UAAWjC,EAA3E,SACG,OAEH,cAAC,IAAD,CACE,aAAW,WACXzD,QAAS,IAAM+D,IACf2B,UAAWhC,EAHb,SAKG,MAEH,eAAC,IAAD,CAAiB,aAAW,UAAUa,MAAO,CAAEoB,cAAe,QAA9D,kBACO,iCAAS1B,EAAY,IAD5B,OAC2C,iCAASN,EAAY7B,YAEhE,cAAC,IAAD,CAAiB,aAAW,OAAO9B,QAAS,IAAM8D,IAAY4B,UAAWjC,EAAzE,SACG,MAEH,cAAC,IAAD,CACE,aAAW,OACXzD,QAAS,IAAM6D,EAASD,EAAY,GACpC8B,UAAWhC,EAHb,SAKG","file":"static/js/4.980a2b3a.chunk.js","sourcesContent":["export const cilCheck = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M199.066,456l-7.379-7.514-3.94-3.9-86.2-86.2.053-.055L17.936,274.665l97.614-97.613,83.565,83.565L398.388,61.344,496,158.958,296.729,358.229,285.469,369.6ZM146.6,358.183l52.459,52.46.1-.1.054.054,52.311-52.311,11.259-11.368L450.746,158.958,398.388,106.6,199.115,305.871,115.55,222.306,63.191,274.665l83.464,83.463Z' class='ci-primary'/>\"]","export const cilXCircle = [\"512 512\",\"<polygon fill='var(--ci-primary-color, currentColor)' points='348.071 141.302 260.308 229.065 172.545 141.302 149.917 163.929 237.681 251.692 149.917 339.456 172.545 362.083 260.308 274.32 348.071 362.083 370.699 339.456 282.935 251.692 370.699 163.929 348.071 141.302' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M425.706,86.294A240,240,0,0,0,86.294,425.706,240,240,0,0,0,425.706,86.294ZM256,464C141.309,464,48,370.691,48,256S141.309,48,256,48s208,93.309,208,208S370.691,464,256,464Z' class='ci-primary'/>\"]","import React, { useEffect, useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CHeaderText,\n  CRow,\n} from '@coreui/react'\nimport { useHistory } from 'react-router-dom'\nimport Loader from '../../../components/Loader'\nimport { Table } from '../../../components/Table'\nimport { approveClient, getClients, rejectClient } from '../../../api/api_client'\nimport CIcon from '@coreui/icons-react'\nimport { cilCheck, cilPen, cilXCircle } from '@coreui/icons'\nimport { store } from 'react-notifications-component'\nimport { danger, info } from '../../../helpers/notifications'\n\nconst ClientList = () => {\n  const history = useHistory()\n  const [hasLoaded, setHasLoaded] = useState()\n  const [clients, setClients] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [status, setStatus] = useState('')\n  const [sort, setSort] = useState('')\n\n  function handleApprove(id, name) {\n    approveClient(id).then((data) => {\n      if (data.ok) {\n        store.addNotification(info('Client ' + name + ' has been approved.'))\n      } else {\n        console.log(data)\n        store.addNotification(danger('Error occurred.'))\n      }\n    })\n  }\n\n  function handleReject(id, name) {\n    rejectClient(id).then((data) => {\n      if (data.ok) {\n        store.addNotification(info('Client ' + name + ' has been rejected.'))\n      } else {\n        console.log(data)\n        store.addNotification(danger('Error occurred.'))\n      }\n    })\n  }\n\n  function getStatusBadge(status) {\n    switch (status.toLowerCase()) {\n      case 'request':\n        return (\n          <CBadge className=\"mt-1\" color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case 'verified':\n        return (\n          <CBadge className=\"mt-1\" color=\"info\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case 'active':\n        return (\n          <CBadge className=\"mt-1\" color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case 'reject':\n        return (\n          <CBadge className=\"mt-1\" color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge className=\"mt-1\" color=\"secondary\" shape=\"rounded-pill\">\n            unknown\n          </CBadge>\n        )\n    }\n  }\n\n  function getApprovalBar(status, id, name) {\n    switch (status) {\n      case 'verified':\n        return (\n          <CButtonGroup role=\"group\" className=\"ms-3\">\n            <CButton\n              color=\"success\"\n              variant=\"outline\"\n              size={'sm'}\n              onClick={() => {\n                handleApprove(id, name)\n              }}\n            >\n              <div className=\"d-inline-flex align-items-center\">\n                <span>Approve</span>\n                <CIcon icon={cilCheck} className=\"ms-1\" />\n              </div>\n            </CButton>\n            <CButton\n              color=\"danger\"\n              variant=\"outline\"\n              size={'sm'}\n              onClick={() => handleReject(id, name)}\n            >\n              <div className=\"d-inline-flex align-items-center\">\n                <span>Reject</span>\n                <CIcon icon={cilXCircle} className=\"ms-1\" />\n              </div>\n            </CButton>\n          </CButtonGroup>\n        )\n      case 'reject':\n        return (\n          <CButton\n            color=\"success\"\n            variant=\"outline\"\n            size={'sm'}\n            onClick={() => handleApprove(id, name)}\n          >\n            <div className=\"d-inline-flex align-items-center\">\n              <span>Approve</span>\n              <CIcon icon={cilCheck} className=\"ms-1\" />\n            </div>\n          </CButton>\n        )\n      default:\n        return <p className=\"text-medium-emphasis\">No actions</p>\n    }\n  }\n\n  useEffect(() => {\n    getClients(searchQuery, status, sort).then((data) => {\n      setClients(\n        data?.map((item) => {\n          return {\n            name: item.company,\n            contact_wa_number: item.contact.wa_number,\n            contact_name: item.contact.dir_name,\n            status: getStatusBadge(item.status),\n            actions: (\n              <CCol>\n                <CButton\n                  color=\"dark\"\n                  size={'sm'}\n                  onClick={() => history.push('/clients/' + item.id)}\n                >\n                  <CIcon icon={cilPen} className=\"me-1\" />\n                  <span>Edit</span>\n                </CButton>\n              </CCol>\n            ),\n            approval: getApprovalBar(item.status.toLowerCase(), item.id, item.company),\n          }\n        }),\n      )\n      setHasLoaded(true)\n    })\n  }, [history, searchQuery, status, sort])\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Company Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'WhatsApp number',\n        accessor: 'contact_wa_number',\n      },\n      {\n        Header: 'Director Name',\n        accessor: 'contact_name',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Approval',\n        accessor: 'approval',\n      },\n      {\n        Header: '',\n        accessor: 'actions',\n      },\n    ],\n    [],\n  )\n\n  return hasLoaded ? (\n    <CContainer>\n      <CRow className=\"align-items-center\">\n        <CCol>\n          <CFormLabel htmlFor=\"searchInput\">Search</CFormLabel>\n          <CFormInput\n            type=\"text\"\n            id=\"searchInput\"\n            placeholder=\"Enter search query..\"\n            onChange={(e) => {\n              setSearchQuery(e.target.value)\n            }}\n          />\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"statusInput\">Status</CFormLabel>\n          <CFormSelect\n            id=\"statusInput\"\n            onChange={(e) => {\n              setStatus(e.target.value)\n            }}\n          >\n            <option value=\"\">All</option>\n            <option value=\"REQUEST\">Request</option>\n            <option value=\"VERIFIED\">Verified</option>\n            <option value=\"ACTIVE\">Active</option>\n            <option value=\"REJECT\">Reject</option>\n            <option value=\"NON_ACTIVE\">Non active</option>\n            <option value=\"FAILED\">Failed</option>\n          </CFormSelect>\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"sortInput\">Sort By</CFormLabel>\n          <CFormSelect\n            id=\"sortInput\"\n            onChange={(e) => {\n              setSort(e.target.value)\n            }}\n          >\n            <option value=\"created_at:desc\">Creation date (new first)</option>\n            <option value=\"created_at:asc\">Creation date (old first)</option>\n            <option value=\"company:asc\">Company name (ascending)</option>\n            <option value=\"company:desc\">Company name (descending)</option>\n            <option value=\"NPWP:asc\">NPWP (ascending)</option>\n            <option value=\"NPWP:desc\">NPWP (descending)</option>\n            <option value=\"contact_dir_name:asc\">Contact name (ascending)</option>\n            <option value=\"contact_dir_name:desc\">Contact name (descending)</option>\n            <option value=\"contact_ktp_id:asc\">Contact KTP ID (ascending)</option>\n            <option value=\"contact_ktp_id:desc\">Contact KTP ID (descending)</option>\n          </CFormSelect>\n        </CCol>\n        <CCol className={'d-flex justify-content-end'}>\n          <CButton color=\"primary\" onClick={() => history.push('/register')}>\n            Register New\n          </CButton>\n        </CCol>\n      </CRow>\n      <br />\n      <CRow>\n        <CCard>\n          <CCardBody>\n            {clients.length > 0 ? (\n              <Table columns={columns} data={clients} />\n            ) : (\n              <>\n                <div className=\"d-flex justify-content-center\">\n                  <CHeaderText>No clients found</CHeaderText>\n                </div>\n              </>\n            )}\n          </CCardBody>\n        </CCard>\n      </CRow>\n    </CContainer>\n  ) : (\n    Loader()\n  )\n}\n\nexport default ClientList\n","import axios from 'axios'\nimport { apiHeader, authHeader } from './requestHeaders'\n\nconst API_URL = 'https://api.ekoop.id/v01'\n\nexport function getClient(id) {\n  return axios\n    .get(API_URL + '/users/admin/client/' + id, { headers: authHeader() })\n    .then((response) => {\n      return response.data.data\n    })\n    .catch((reason) => {\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n\nexport function updateClient(clientId, client) {\n  return axios\n    .put(\n      API_URL + '/users/admin/client/' + clientId,\n      {\n        company: client.company,\n        contact_dir_name: client.contact.dir_name,\n        address: client.address,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function registerClient(client) {\n  return axios\n    .post(API_URL + '/users/clients/register', client, {\n      headers: apiHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function approveClient(clientId) {\n  const status = {\n    status: 'ACTIVE',\n  }\n  return axios\n    .put(API_URL + '/users/admin/client/status/' + clientId, status, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function rejectClient(clientId) {\n  const status = {\n    status: 'REJECT',\n  }\n  return axios\n    .put(API_URL + '/users/admin/client/status/' + clientId, status, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function getClients(searchQuery, status, sort) {\n  if (sort === '') sort = 'created_at:desc'\n\n  return axios\n    .get(\n      API_URL + '/users/admin/client?search=' + searchQuery + '&status=' + status + '&sort=' + sort,\n      { headers: authHeader() },\n    )\n    .then((response) => {\n      return response.data.data\n    })\n    .catch((reason) => {\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n","import { usePagination, useTable } from 'react-table'\nimport {\n  CContainer,\n  CFormInput,\n  CHeaderText,\n  CPagination,\n  CPaginationItem,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport React from 'react'\n\n// eslint-disable-next-line react/prop-types\nexport function Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable({ columns, data, autoResetPageIndex: true }, usePagination)\n\n  return (\n    <>\n      <CTable hover responsive style={{ minWidth: '45rem' }} {...getTableProps()}>\n        <CTableHead>\n          {headerGroups.map((headerGroup, index) => (\n            <CTableRow key={index} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, index) => (\n                <CTableHeaderCell key={index} {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </CTableHeaderCell>\n              ))}\n            </CTableRow>\n          ))}\n        </CTableHead>\n        <CTableBody {...getTableBodyProps()}>\n          {page.map((row, index) => {\n            prepareRow(row)\n            return (\n              <CTableRow key={index} {...row.getRowProps()}>\n                {row.cells.map((cell, index) => {\n                  return (\n                    <CTableDataCell key={index} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </CTableDataCell>\n                  )\n                })}\n              </CTableRow>\n            )\n          })}\n        </CTableBody>\n      </CTable>\n\n      <CContainer className={'d-flex justify-content-end align-items-center'}>\n        <CHeaderText className={'pe-2'}>Go to page:</CHeaderText>\n        <CFormInput\n          min={1}\n          max={pageCount}\n          type=\"number\"\n          defaultValue={pageIndex + 1}\n          onChange={(e) => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0\n            gotoPage(page)\n          }}\n          style={{ width: '100px' }}\n        />\n      </CContainer>\n\n      <CPagination align=\"center\" aria-label=\"Page navigation\">\n        <CPaginationItem aria-label=\"First\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Previous\"\n          onClick={() => previousPage()}\n          disabled={!canNextPage}\n        >\n          {'<'}\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Current\" style={{ pointerEvents: 'none' }}>\n          Page <strong>{pageIndex + 1}</strong> of <strong>{pageOptions.length}</strong>\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Next\" onClick={() => nextPage()} disabled={!canPreviousPage}>\n          {'>'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Last\"\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n        >\n          {'>>'}\n        </CPaginationItem>\n      </CPagination>\n    </>\n  )\n}\n"],"sourceRoot":""}