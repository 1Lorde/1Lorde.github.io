{"version":3,"sources":["views/user/user_list/UserList.js","components/Table.js","api/api_user.js"],"names":["UserList","history","useHistory","hasLoaded","setHasLoaded","useState","users","setUsers","searchQuery","setSearchQuery","status","setStatus","role","setRole","sort","setSort","pageCount","setPageCount","fetchIdRef","useRef","getStatusBadge","toLowerCase","className","color","shape","fetchData","useCallback","skip","current","getUsers","then","data","console","log","pages","Math","floor","pagination","total","limit","map","item","name","number","wa_number","Roles","toUpperCase","action","size","onClick","push","id","icon","cilPen","columns","React","useMemo","Header","accessor","htmlFor","type","placeholder","onChange","e","target","value","controlledPageCount","Table","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","state","pageIndex","useTable","initialState","pageSize","manualPagination","usePagination","useEffect","hover","responsive","style","minWidth","headerGroup","index","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","min","max","defaultValue","Number","width","align","disabled","pointerEvents","length","API_URL","axios","get","authHeader","response","catch","reason","message","getUser","updateUser","user","put","address","createUser","post"],"mappings":"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","file":"static/js/16.3a59488b.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CRow,\n} from '@coreui/react'\nimport { useHistory } from 'react-router-dom'\nimport { Roles } from '../../../helpers/role'\nimport { Table } from '../../../components/Table'\nimport { getUsers } from '../../../api/api_user'\nimport { cilPen } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\nconst UserList = () => {\n  const history = useHistory()\n  const [hasLoaded, setHasLoaded] = useState(false)\n  const [users, setUsers] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [status, setStatus] = useState('')\n  const [role, setRole] = useState('')\n  const [sort, setSort] = useState('')\n  const [pageCount, setPageCount] = useState(0)\n  const fetchIdRef = useRef(0)\n\n  function getStatusBadge(status) {\n    switch (status.toLowerCase()) {\n      case 'active':\n        return (\n          <CBadge className=\"mt-1\" color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case 'inactive':\n        return (\n          <CBadge className=\"mt-1\" color=\"secondary\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge className=\"mt-1\" color=\"dark\" shape=\"rounded-pill\">\n            unknown\n          </CBadge>\n        )\n    }\n  }\n\n  const fetchData = useCallback(\n    ({ skip }) => {\n      const fetchId = ++fetchIdRef.current\n      if (fetchId === fetchIdRef.current) {\n        setHasLoaded(false)\n        getUsers(skip, searchQuery, status, role, sort).then((data) => {\n          console.log(data)\n          let pages = Math.floor(data.pagination.total / data.pagination.limit)\n          if (data.pagination.total / data.pagination.limit > pageCount) {\n            pages += 1\n          }\n          setPageCount(pages)\n          setUsers(\n            data.data?.map((item) => {\n              return {\n                name: item.name,\n                number: item.wa_number,\n                role: Roles[item.role],\n                status: getStatusBadge(item.status.toUpperCase()),\n                action: (\n                  <CButton\n                    color=\"dark\"\n                    size={'sm'}\n                    onClick={() => history.push('/users/' + item.id)}\n                  >\n                    <CIcon icon={cilPen} className=\"me-1\" />\n                    Edit\n                  </CButton>\n                ),\n              }\n            }),\n          )\n          setHasLoaded(true)\n        })\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [history, searchQuery, status, role, sort],\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'WhatsApp Number',\n        accessor: 'number',\n      },\n      {\n        Header: 'Role',\n        accessor: 'role',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Action',\n        accessor: 'action',\n      },\n    ],\n    [],\n  )\n\n  return (\n    <CContainer>\n      <CRow className=\"align-items-center\">\n        <CCol>\n          <CFormLabel htmlFor=\"searchInput\">Search</CFormLabel>\n          <CFormInput\n            type=\"text\"\n            id=\"searchInput\"\n            placeholder=\"Enter search query..\"\n            onChange={(e) => {\n              setSearchQuery(e.target.value)\n            }}\n          />\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"statusInput\">Status</CFormLabel>\n          <CFormSelect\n            id=\"statusInput\"\n            onChange={(e) => {\n              setStatus(e.target.value)\n            }}\n          >\n            <option value=\"\">All</option>\n            <option value=\"inactive\">Inactive</option>\n            <option value=\"active\">Active</option>\n          </CFormSelect>\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"roleInput\">Role</CFormLabel>\n          <CFormSelect\n            id=\"roleInput\"\n            onChange={(e) => {\n              setRole(e.target.value)\n            }}\n          >\n            <option value=\"\">All</option>\n            <option value=\"app-owner\">App Owner</option>\n            <option value=\"product-technical\">Product & Technical</option>\n            <option value=\"marketing-finance\">Marketing & Finance</option>\n            <option value=\"koperasi-owner\">Koperasi Owner</option>\n            <option value=\"credit-analyst\">Credit Analyst</option>\n            <option value=\"account-officer\">Account Officer</option>\n          </CFormSelect>\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"sortInput\">Sort By</CFormLabel>\n          <CFormSelect\n            id=\"sortInput\"\n            onChange={(e) => {\n              setSort(e.target.value)\n            }}\n          >\n            <option value=\"name:asc\">Name (ascending)</option>\n            <option value=\"name:desc\">Name (descending)</option>\n            <option value=\"created_at:desc\">Creation date (new first)</option>\n            <option value=\"created_at:asc\">Creation date (old first)</option>\n          </CFormSelect>\n        </CCol>\n        <CCol className={'d-flex justify-content-end'}>\n          <CButton color=\"primary\" onClick={() => history.push('/users/create')}>\n            Add New\n          </CButton>\n        </CCol>\n      </CRow>\n      <br />\n      <CRow>\n        <CCard>\n          <CCardBody>\n            <Table\n              columns={columns}\n              data={users}\n              controlledPageCount={pageCount}\n              fetchData={fetchData}\n              hasLoaded={hasLoaded}\n            />\n          </CCardBody>\n        </CCard>\n      </CRow>\n    </CContainer>\n  )\n}\n\nexport default UserList\n","import { usePagination, useTable } from 'react-table'\nimport {\n  CCol,\n  CContainer,\n  CFormInput,\n  CHeaderText,\n  CPagination,\n  CPaginationItem,\n  CSpinner,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport React, { useEffect } from 'react'\n\n// eslint-disable-next-line react/prop-types\nexport function Table({ columns, data, controlledPageCount, fetchData, hasLoaded }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        pageIndex: 0,\n        pageSize: 10,\n      },\n      manualPagination: true,\n      pageCount: controlledPageCount,\n    },\n    usePagination,\n  )\n\n  useEffect(() => {\n    const skip = pageIndex * 10\n    fetchData && fetchData({ skip })\n  }, [fetchData, pageIndex])\n  return hasLoaded ? (\n    <>\n      <CTable hover responsive style={{ minWidth: '45rem' }} {...getTableProps()}>\n        <CTableHead>\n          {headerGroups.map((headerGroup, index) => (\n            <CTableRow key={index} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, index) => (\n                <CTableHeaderCell key={index} {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </CTableHeaderCell>\n              ))}\n            </CTableRow>\n          ))}\n        </CTableHead>\n        <CTableBody {...getTableBodyProps()}>\n          {page.map((row, index) => {\n            prepareRow(row)\n            return (\n              <CTableRow key={index} {...row.getRowProps()}>\n                {row.cells.map((cell, index) => {\n                  return (\n                    <CTableDataCell key={index} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </CTableDataCell>\n                  )\n                })}\n              </CTableRow>\n            )\n          })}\n        </CTableBody>\n      </CTable>\n\n      <CContainer className={'d-flex justify-content-end align-items-center'}>\n        <CHeaderText className={'pe-2'}>Go to page:</CHeaderText>\n        <CFormInput\n          min={1}\n          max={controlledPageCount}\n          type=\"number\"\n          defaultValue={pageIndex + 1}\n          onChange={(e) => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0\n            gotoPage(page)\n          }}\n          style={{ width: '100px' }}\n        />\n      </CContainer>\n\n      <CPagination align=\"center\" aria-label=\"Page navigation\">\n        <CPaginationItem aria-label=\"First\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Previous\"\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n        >\n          {'<'}\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Current\" style={{ pointerEvents: 'none' }}>\n          Page <strong>{pageIndex + 1}</strong> of <strong>{pageOptions.length}</strong>\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Next\" onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Last\"\n          onClick={() => gotoPage(controlledPageCount - 1)}\n          disabled={!canNextPage}\n        >\n          {'>>'}\n        </CPaginationItem>\n      </CPagination>\n    </>\n  ) : (\n    <CCol className=\"d-flex justify-content-center\">\n      <CSpinner color=\"primary\" />\n    </CCol>\n  )\n}\n","import axios from 'axios'\nimport { authHeader } from './requestHeaders'\n\nconst API_URL = 'https://api.ekoop.id/v01'\n\nexport function getUsers(skip, searchQuery, status, role, sort) {\n  return axios\n    .get(\n      API_URL +\n        '/auth/user?search=' +\n        searchQuery +\n        '&status=' +\n        status +\n        '&role=' +\n        role +\n        '&sort=' +\n        sort +\n        '&skip=' +\n        skip,\n      {\n        headers: authHeader(),\n      },\n    )\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      console.log(reason.message)\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n\nexport function getUser(id) {\n  return axios\n    .get(API_URL + '/auth/user/' + id, { headers: authHeader() })\n    .then((response) => {\n      return response.data.data\n    })\n    .catch((reason) => {\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n\nexport function updateUser(user) {\n  return axios\n    .put(\n      API_URL + '/auth/user/' + user.id,\n      {\n        wa_number: user.wa_number,\n        name: user.name,\n        address: user.address,\n        role: user.role,\n        status: user.status,\n        // avatar: user.avatar,\n        // ktp_image: user.ktp_image,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function createUser(user) {\n  return axios\n    .post(API_URL + '/auth/user', user, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n"],"sourceRoot":""}