{"version":3,"sources":["views/notifications/notification_list/Notifications.js","components/Table.js","api/api_notification.js"],"names":["Notifications","history","useHistory","notifications","setNotifications","useState","hasLoaded","setHasLoaded","columns","React","useMemo","Header","accessor","useEffect","getNotifications","then","data","ok","console","log","map","item","created","sender","title","content","action","color","size","onClick","push","id","fluid","className","xl","value","Loader","Table","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","pageIndex","useTable","autoResetPageIndex","usePagination","hover","responsive","style","minWidth","headerGroup","index","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","min","max","type","defaultValue","onChange","e","target","Number","width","align","disabled","pointerEvents","length","API_URL","axios","get","authHeader","response","catch","reason","status","message","getNotification"],"mappings":"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","file":"static/js/8.8ebf4740.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CFormInput,\n  CFormSelect,\n  CRow,\n} from '@coreui/react'\nimport { getNotifications } from '../../../api/api_notification'\nimport { Table } from '../../../components/Table'\nimport Loader from '../../../components/Loader'\nimport { useHistory } from 'react-router-dom'\n\nconst Notifications = () => {\n  const history = useHistory()\n  const [notifications, setNotifications] = useState([])\n  const [hasLoaded, setHasLoaded] = useState(false)\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Date',\n        accessor: 'created',\n      },\n      {\n        Header: 'Sender',\n        accessor: 'sender',\n      },\n      {\n        Header: 'Title',\n        accessor: 'title',\n      },\n      {\n        Header: 'Content',\n        accessor: 'content',\n      },\n      {\n        Header: 'Action',\n        accessor: 'action',\n      },\n    ],\n    [],\n  )\n\n  useEffect(() => {\n    getNotifications().then((data) => {\n      if (data.ok === true) {\n        console.log(data)\n        setNotifications(\n          data.data?.map((item) => {\n            return {\n              created: item.created,\n              sender: item.sender,\n              title: item.title,\n              content: item.content,\n              action: (\n                <CButton\n                  color=\"dark\"\n                  size={'sm'}\n                  onClick={() => history.push('/notifications/' + item.id)}\n                >\n                  View\n                </CButton>\n              ),\n            }\n          }),\n        )\n        setHasLoaded(true)\n      }\n    })\n  }, [])\n\n  return hasLoaded ? (\n    <CContainer fluid>\n      <CRow className=\"align-items-center\">\n        <CCol xl={1}>Search</CCol>\n        <CCol>\n          <CFormInput></CFormInput>\n        </CCol>\n        <CCol>\n          <CFormSelect>\n            <option value=\"1\">One</option>\n            <option value=\"2\">Two</option>\n            <option value=\"3\">Three</option>\n          </CFormSelect>\n        </CCol>\n      </CRow>\n      <br />\n      <CRow>\n        <CCard>\n          <CCardBody>\n            <Table columns={columns} data={notifications} />\n          </CCardBody>\n        </CCard>\n      </CRow>\n    </CContainer>\n  ) : (\n    Loader()\n  )\n}\n\nexport default Notifications\n","import { usePagination, useTable } from 'react-table'\nimport {\n  CContainer,\n  CFormInput,\n  CHeaderText,\n  CPagination,\n  CPaginationItem,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport React from 'react'\n\n// eslint-disable-next-line react/prop-types\nexport function Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable({ columns, data, autoResetPageIndex: true }, usePagination)\n\n  return (\n    <>\n      <CTable hover responsive style={{ minWidth: '45rem' }} {...getTableProps()}>\n        <CTableHead>\n          {headerGroups.map((headerGroup, index) => (\n            <CTableRow key={index} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, index) => (\n                <CTableHeaderCell key={index} {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </CTableHeaderCell>\n              ))}\n            </CTableRow>\n          ))}\n        </CTableHead>\n        <CTableBody {...getTableBodyProps()}>\n          {page.map((row, index) => {\n            prepareRow(row)\n            return (\n              <CTableRow key={index} {...row.getRowProps()}>\n                {row.cells.map((cell, index) => {\n                  return (\n                    <CTableDataCell key={index} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </CTableDataCell>\n                  )\n                })}\n              </CTableRow>\n            )\n          })}\n        </CTableBody>\n      </CTable>\n\n      <CContainer className={'d-flex justify-content-end align-items-center'}>\n        <CHeaderText className={'pe-2'}>Go to page:</CHeaderText>\n        <CFormInput\n          min={1}\n          max={pageCount}\n          type=\"number\"\n          defaultValue={pageIndex + 1}\n          onChange={(e) => {\n            const page = e.target.value ? Number(e.target.value) - 1 : 0\n            gotoPage(page)\n          }}\n          style={{ width: '100px' }}\n        />\n      </CContainer>\n\n      <CPagination align=\"center\" aria-label=\"Page navigation\">\n        <CPaginationItem aria-label=\"First\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Previous\"\n          onClick={() => previousPage()}\n          disabled={!canNextPage}\n        >\n          {'<'}\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Current\" style={{ pointerEvents: 'none' }}>\n          Page <strong>{pageIndex + 1}</strong> of <strong>{pageOptions.length}</strong>\n        </CPaginationItem>\n        <CPaginationItem aria-label=\"Next\" onClick={() => nextPage()} disabled={!canPreviousPage}>\n          {'>'}\n        </CPaginationItem>\n        <CPaginationItem\n          aria-label=\"Last\"\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n        >\n          {'>>'}\n        </CPaginationItem>\n      </CPagination>\n    </>\n  )\n}\n","import axios from 'axios'\nimport { authHeader } from './requestHeaders'\n\nconst API_URL = 'https://api.ekoop.id/v01'\n\nexport function getNotifications() {\n  return axios\n    .get(API_URL + '/users/notification', { headers: authHeader() })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n\nexport function getNotification(id) {\n  return axios\n    .get(API_URL + '/users/notification/' + id, { headers: authHeader() })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      if (reason.response.status === 403) {\n        console.log(reason.message)\n        return null\n      }\n    })\n}\n"],"sourceRoot":""}