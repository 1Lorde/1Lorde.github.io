{"version":3,"sources":["components/SimpleTable.js","views/vendor/vendor_list/VendorList.js","api/api_vendors.js"],"names":["SimpleTable","columns","data","fetchData","hasLoaded","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","useTable","useEffect","hover","responsive","style","minWidth","map","headerGroup","index","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","className","color","VendorList","history","useHistory","setHasLoaded","useState","vendorList","setVendorList","searchQuery","setSearchQuery","status","setStatus","fetchIdRef","useRef","useCallback","current","getVendors","then","console","log","vendors","item","name","url","api_base_url","location","address","shape","action","size","onClick","push","id","icon","cilPen","React","useMemo","Header","accessor","htmlFor","type","placeholder","onChange","e","target","value","API_URL","axios","get","authHeader","response","catch","reason","getVendor"],"mappings":"gLAcO,SAASA,GAAY,QAAEC,EAAF,KAAWC,EAAX,UAAiBC,EAAjB,UAA4BC,IACtD,MAAM,cAAEC,EAAF,kBAAiBC,EAAjB,aAAoCC,EAApC,WAAkDC,EAAlD,KAA8DC,GAASC,mBAAS,CACpFT,UACAC,SAMF,OAHAS,qBAAU,KACRR,MACC,CAACA,IACGC,EACL,mCACE,eAAC,KAAD,CAAQQ,OAAK,EAACC,YAAU,EAACC,MAAO,CAAEC,SAAU,YAAeV,IAA3D,UACE,cAAC,KAAD,UACGE,EAAaS,KAAI,CAACC,EAAaC,IAC9B,cAAC,KAAD,IAA2BD,EAAYE,sBAAvC,SACGF,EAAYG,QAAQJ,KAAI,CAACK,EAAQH,IAChC,cAAC,KAAD,IAAkCG,EAAOC,iBAAzC,SACGD,EAAOE,OAAO,WADML,MAFXA,OASpB,cAAC,KAAD,IAAgBZ,IAAhB,SACGG,EAAKO,KAAI,CAACQ,EAAKN,KACdV,EAAWgB,GAET,cAAC,KAAD,IAA2BA,EAAIC,cAA/B,SACGD,EAAIE,MAAMV,KAAI,CAACW,EAAMT,IAElB,cAAC,KAAD,IAAgCS,EAAKC,eAArC,SACGD,EAAKJ,OAAO,SADML,MAHXA,aAe1B,cAAC,IAAD,CAAMW,UAAU,gCAAhB,SACE,cAAC,KAAD,CAAUC,MAAM,c,aCsFPC,UA5HI,KACjB,MAAMC,EAAUC,eACT7B,EAAW8B,GAAgBC,sBAC3BC,EAAYC,GAAiBF,mBAAS,KACtCG,EAAaC,GAAkBJ,mBAAS,KACxCK,EAAQC,GAAaN,mBAAS,IAC/BO,EAAaC,iBAAO,GAEpBxC,EAAYyC,uBAChB,OACoBF,EAAWG,UACbH,EAAWG,UACzBX,GAAa,GACbY,YAAWR,EAAaE,GAAQO,MAAM7C,IAAU,IAAD,EAC7C8C,QAAQC,IAAI/C,GACZmC,EAAa,UACXnC,EAAKgD,eADM,aACX,EAAclC,KAAKmC,IACV,CACLC,KAAMD,EAAKC,KACXC,IAAKF,EAAKG,aACVC,SAAUJ,EAAKK,QACfhB,OACkB,WAAhBW,EAAKX,OACH,cAAC,IAAD,CAAQX,UAAU,OAAOC,MAAM,UAAU2B,MAAM,eAA/C,oBAIA,cAAC,IAAD,CAAQ5B,UAAU,OAAOC,MAAM,YAAY2B,MAAM,eAAjD,sBAIJC,OACE,eAAC,IAAD,CACE5B,MAAM,OACN6B,KAAM,KACNC,QAAS,IAAM5B,EAAQ6B,KAAK,iBAAmBV,EAAKW,IAHtD,UAKE,cAAC,IAAD,CAAOC,KAAMC,IAAQnC,UAAU,SALjC,eAYRK,GAAa,SAKnB,CAACF,EAASM,EAAaE,IAGnBvC,EAAUgE,IAAMC,SACpB,IAAM,CACJ,CACEC,OAAQ,eACRC,SAAU,QAEZ,CACED,OAAQ,UACRC,SAAU,OAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,SACRC,SAAU,YAGd,IAGF,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAMvC,UAAU,qBAAhB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYwC,QAAQ,cAApB,oBACA,cAAC,IAAD,CACEC,KAAK,OACLR,GAAG,cACHS,YAAY,uBACZC,SAAWC,IACTlC,EAAekC,EAAEC,OAAOC,aAI9B,eAAC,IAAD,WACE,cAAC,IAAD,CAAYN,QAAQ,cAApB,oBACA,eAAC,IAAD,CACEP,GAAG,cACHU,SAAWC,IACThC,EAAUgC,EAAEC,OAAOC,QAHvB,UAME,wBAAQA,MAAM,GAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,aAAd,4BAGJ,cAAC,IAAD,CAAM9C,UAAW,6BAAjB,SACE,cAAC,IAAD,CAASC,MAAM,UAAU8B,QAAS,IAAM5B,EAAQ6B,KAAK,mBAArD,0BAKJ,uBACA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC7D,EAAD,CACEC,QAASA,EACTC,KAAMkC,EACNjC,UAAWA,EACXC,UAAWA,e,iCCtIzB,mGAGA,MAAMwE,EAAU,2BAET,SAAS9B,EAAWR,EAAaE,GACtC,OAAOqC,IACJC,IAAIF,EAAU,+BAAiCtC,EAAc,WAAaE,EAAQ,CACjFpB,QAAS2D,gBAEVhC,MAAMiC,GACEA,EAAS9E,OAEjB+E,OAAOC,IACNlC,QAAQC,IAAIiC,MAIX,SAASC,EAAUrB,GACxB,OAAOe,IACJC,IAAIF,EAAU,wBAA0Bd,EAAI,CAC3C1C,QAAS2D,gBAEVhC,MAAMiC,GACEA,EAAS9E,OAEjB+E,OAAOC,IACNlC,QAAQC,IAAIiC","file":"static/js/26.23e68597.chunk.js","sourcesContent":["import { useTable } from 'react-table'\nimport {\n  CCol,\n  CSpinner,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport React, { useEffect } from 'react'\n\n// eslint-disable-next-line react/prop-types\nexport function SimpleTable({ columns, data, fetchData, hasLoaded }) {\n  const { getTableProps, getTableBodyProps, headerGroups, prepareRow, rows } = useTable({\n    columns,\n    data,\n  })\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n  return hasLoaded ? (\n    <>\n      <CTable hover responsive style={{ minWidth: '45rem' }} {...getTableProps()}>\n        <CTableHead>\n          {headerGroups.map((headerGroup, index) => (\n            <CTableRow key={index} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, index) => (\n                <CTableHeaderCell key={index} {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </CTableHeaderCell>\n              ))}\n            </CTableRow>\n          ))}\n        </CTableHead>\n        <CTableBody {...getTableBodyProps()}>\n          {rows.map((row, index) => {\n            prepareRow(row)\n            return (\n              <CTableRow key={index} {...row.getRowProps()}>\n                {row.cells.map((cell, index) => {\n                  return (\n                    <CTableDataCell key={index} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </CTableDataCell>\n                  )\n                })}\n              </CTableRow>\n            )\n          })}\n        </CTableBody>\n      </CTable>\n    </>\n  ) : (\n    <CCol className=\"d-flex justify-content-center\">\n      <CSpinner color=\"primary\" />\n    </CCol>\n  )\n}\n","import React, { useCallback, useRef, useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CRow,\n} from '@coreui/react'\nimport { useHistory } from 'react-router-dom'\nimport { cilPen } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { SimpleTable } from '../../../components/SimpleTable'\nimport { getVendors } from '../../../api/api_vendors'\n\nconst VendorList = () => {\n  const history = useHistory()\n  const [hasLoaded, setHasLoaded] = useState()\n  const [vendorList, setVendorList] = useState([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [status, setStatus] = useState('')\n  const fetchIdRef = useRef(0)\n\n  const fetchData = useCallback(\n    () => {\n      const fetchId = ++fetchIdRef.current\n      if (fetchId === fetchIdRef.current) {\n        setHasLoaded(false)\n        getVendors(searchQuery, status).then((data) => {\n          console.log(data)\n          setVendorList(\n            data.vendors?.map((item) => {\n              return {\n                name: item.name,\n                url: item.api_base_url,\n                location: item.address,\n                status:\n                  item.status === 'ACTIVE' ? (\n                    <CBadge className=\"mt-1\" color=\"success\" shape=\"rounded-pill\">\n                      ACTIVE\n                    </CBadge>\n                  ) : (\n                    <CBadge className=\"mt-1\" color=\"secondary\" shape=\"rounded-pill\">\n                      INACTIVE\n                    </CBadge>\n                  ),\n                action: (\n                  <CButton\n                    color=\"dark\"\n                    size={'sm'}\n                    onClick={() => history.push('/ppob/vendors/' + item.id)}\n                  >\n                    <CIcon icon={cilPen} className=\"me-1\" />\n                    Edit\n                  </CButton>\n                ),\n              }\n            }),\n          )\n          setHasLoaded(true)\n        })\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [history, searchQuery, status],\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Company name',\n        accessor: 'name',\n      },\n      {\n        Header: 'API URL',\n        accessor: 'url',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Action',\n        accessor: 'action',\n      },\n    ],\n    [],\n  )\n\n  return (\n    <CContainer>\n      <CRow className=\"align-items-center\">\n        <CCol>\n          <CFormLabel htmlFor=\"searchInput\">Search</CFormLabel>\n          <CFormInput\n            type=\"text\"\n            id=\"searchInput\"\n            placeholder=\"Enter search query..\"\n            onChange={(e) => {\n              setSearchQuery(e.target.value)\n            }}\n          />\n        </CCol>\n        <CCol>\n          <CFormLabel htmlFor=\"statusInput\">Status</CFormLabel>\n          <CFormSelect\n            id=\"statusInput\"\n            onChange={(e) => {\n              setStatus(e.target.value)\n            }}\n          >\n            <option value=\"\">All</option>\n            <option value=\"ACTIVE\">Active</option>\n            <option value=\"NOT-ACTIVE\">Inactive</option>\n          </CFormSelect>\n        </CCol>\n        <CCol className={'d-flex justify-content-end'}>\n          <CButton color=\"primary\" onClick={() => history.push('/nasabah/create')}>\n            Add New\n          </CButton>\n        </CCol>\n      </CRow>\n      <br />\n      <CRow>\n        <CCard>\n          <CCardBody>\n            <SimpleTable\n              columns={columns}\n              data={vendorList}\n              fetchData={fetchData}\n              hasLoaded={hasLoaded}\n            />\n          </CCardBody>\n        </CCard>\n      </CRow>\n    </CContainer>\n  )\n}\n\nexport default VendorList\n","import axios from 'axios'\nimport { authHeader } from './requestHeaders'\n\nconst API_URL = 'https://api.ekoop.id/v01'\n\nexport function getVendors(searchQuery, status) {\n  return axios\n    .get(API_URL + '/transaction/vendors?search=' + searchQuery + '&status=' + status, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      console.log(reason)\n    })\n}\n\nexport function getVendor(id) {\n  return axios\n    .get(API_URL + '/transaction/vendors/' + id, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      console.log(reason)\n    })\n}\n"],"sourceRoot":""}