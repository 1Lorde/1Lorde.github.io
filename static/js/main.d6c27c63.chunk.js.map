{"version":3,"sources":["routes/PublicRoute.js","routes/PrivateRoute.js","App.js","serviceWorker.js","store.js","index.js","services/auth.service.js"],"names":["PublicRoute","props","component","Component","restricted","rest","render","AuthService","isAuthenticated","to","PrivateRoute","DefaultLayout","React","lazy","Login","ResetPassword","InputOtp","Page404","App","Suspense","fallback","className","color","exact","path","Boolean","window","location","hostname","match","initialState","sidebarShow","store","createStore","state","type","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","login","waNumber","password","localStorage","setItem","logout","removeItem","getCurrentUser","JSON","parse","getItem"],"mappings":"mkCAsBeA,MAdf,SAAqBC,GACnB,MAAQC,UAAWC,EAAb,WAAwBC,GAAa,KAAUC,GAASJ,EAU9D,OAAO,cAAC,IAAD,IAAWI,EAAMC,OARRL,GACVM,IAAYC,mBAAqBJ,EAC5B,cAAC,IAAD,CAAUK,GAAG,aAGf,cAACN,EAAD,IAAeF,OCEXS,MAdf,SAAsBT,GACpB,MAAQC,UAAWC,KAAcE,GAASJ,EAU1C,OAAO,cAAC,IAAD,IAAWI,EAAMC,OARRL,GACTM,IAAYC,kBAIV,cAACL,EAAD,IAAeF,IAHb,cAAC,IAAD,CAAUQ,GAAG,c,QCD1B,MAAME,EAAgBC,IAAMC,MAAK,IAAM,gEAGjCC,EAAQF,IAAMC,MAAK,IAAM,wDACzBE,EAAgBH,IAAMC,MAAK,IAAM,wDACjCG,EAAWJ,IAAMC,MAAK,IAAM,kCAC5BI,EAAUL,IAAMC,MAAK,IAAM,kCAEjC,MAAMK,UAAYf,YAChBG,SACE,OACE,cAAC,IAAD,UACE,cAAC,IAAMa,SAAP,CACEC,SACE,qBAAKC,UAAU,yDAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMA,UAAU,gCAAhB,SACE,cAAC,IAAD,CAAUC,MAAM,oBAN5B,SAaE,eAAC,IAAD,WACE,cAAC,EAAD,CAAaC,OAAK,EAACnB,YAAU,EAACF,UAAWY,EAAOU,KAAK,WACrD,cAAC,EAAD,CAAaD,OAAK,EAACnB,YAAU,EAACF,UAAWa,EAAeS,KAAK,oBAC7D,cAAC,EAAD,CAAaD,OAAK,EAACnB,YAAU,EAACF,UAAWc,EAAUQ,KAAK,eACxD,cAAC,EAAD,CAAaD,OAAK,EAACrB,UAAWe,EAASO,KAAK,SAC5C,cAAC,EAAD,CAActB,UAAWS,EAAea,KAAK,cAQ1CN,QCpCKO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,sBCbnC,MAAMC,EAAe,CACnBC,aAAa,GAaAC,MADDC,aATM,CAACC,EAAQJ,GAAgBK,UAAS9B,KAE7C,QADC8B,EAEG,IAAKD,KAAU7B,GAEf6B,ICFbE,IAAS9B,OACP,cAAC,IAAD,CAAU0B,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SFwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAMC,IAClCA,EAAaC,iB,gCGvHnB,OA6Ce,QAzCf,MACEC,MAAMC,EAAUC,GAqBdC,aAAaC,QAAQ,QAAS,cAGhCC,SACEF,aAAaG,WAAW,SAG1BC,iBACE,OAAOC,KAAKC,MAAMN,aAAaO,QAAQ,UAGzC/C,kBACE,QAAIwC,aAAaO,QAAQ,a","file":"static/js/main.d6c27c63.chunk.js","sourcesContent":["import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\nimport AuthService from '../services/auth.service'\n\ninterface PublicRouteProps {\n  restricted?: boolean;\n}\n\nfunction PublicRoute(props: PublicRouteProps & RouteProps): React.ReactElement {\n  const { component: Component, restricted = false, ...rest } = props\n\n  const render = (props) => {\n    if (AuthService.isAuthenticated() && restricted) {\n      return <Redirect to=\"/profile\" />\n    }\n\n    return <Component {...props} />\n  }\n\n  return <Route {...rest} render={render} />\n}\n\nexport default PublicRoute\n","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\nimport AuthService from '../services/auth.service'\n\nfunction PrivateRoute(props: RouteProps): React.ReactElement {\n  const { component: Component, ...rest } = props\n\n  const render = (props) => {\n    if (!AuthService.isAuthenticated()) {\n      return <Redirect to=\"/login\" />\n    }\n\n    return <Component {...props} />\n  }\n\n  return <Route {...rest} render={render} />\n}\n\nexport default PrivateRoute\n","import React, { Component } from 'react'\nimport { HashRouter, Switch } from 'react-router-dom'\nimport './scss/style.scss'\nimport PublicRoute from './routes/PublicRoute'\nimport PrivateRoute from './routes/PrivateRoute'\nimport { CCol, CContainer, CRow, CSpinner } from '@coreui/react'\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst ResetPassword = React.lazy(() => import('./views/pages/reset_password/ResetPassword'))\nconst InputOtp = React.lazy(() => import('./views/pages/input_otp/InputOtp'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <React.Suspense\n          fallback={\n            <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n              <CContainer>\n                <CRow>\n                  <CCol className=\"d-flex justify-content-center\">\n                    <CSpinner color=\"primary\" />\n                  </CCol>\n                </CRow>\n              </CContainer>\n            </div>\n          }\n        >\n          <Switch>\n            <PublicRoute exact restricted component={Login} path=\"/login\" />\n            <PublicRoute exact restricted component={ResetPassword} path=\"/reset_password\" />\n            <PublicRoute exact restricted component={InputOtp} path=\"/input_otp\" />\n            <PublicRoute exact component={Page404} path=\"/404\" />\n            <PrivateRoute component={DefaultLayout} path=\"/\" />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { createStore } from 'redux'\n\nconst initialState = {\n  sidebarShow: true,\n}\n\nconst changeState = (state = initialState, { type, ...rest }) => {\n  switch (type) {\n    case 'set':\n      return { ...state, ...rest }\n    default:\n      return state\n  }\n}\n\nconst store = createStore(changeState)\nexport default store\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import axios from 'axios'\n\nconst API_URL = 'https://api.ekoop.id/v01/auth/auth/'\n\nclass AuthService {\n  login(waNumber, password) {\n    // return axios\n    //   .post(\n    //     API_URL + 'login/password',\n    //     {\n    //       wa_number: waNumber,\n    //       password: password,\n    //     },\n    //     {\n    //       headers: {\n    //         'Ekoop-Api-Key': '4a6e486c-3167-4112-97e7-5aa690042613',\n    //         'X-Request-Id': '1',\n    //       },\n    //     },\n    //   )\n    //   .then((response) => {\n    //     if (response.data.auth_id) {\n    //       localStorage.setItem('token', response.data.auth_id)\n    //     }\n    //     return response.data\n    //   })\n    localStorage.setItem('token', 'TOKEN_HERE')\n  }\n\n  logout() {\n    localStorage.removeItem('token')\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('token'))\n  }\n\n  isAuthenticated() {\n    if (localStorage.getItem('token')) {\n      return true\n    }\n    return false\n  }\n}\n\nexport default new AuthService()\n"],"sourceRoot":""}