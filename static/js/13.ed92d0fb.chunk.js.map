{"version":3,"sources":["views/products/products_ppob_details/ProductPpobDetails.js","helpers/utils.js","api/api_service.js"],"names":["ProductPpobDetails","history","useHistory","id","useParams","service","setService","useState","hasLoaded","setHasLoaded","validated","setValidated","servicesMargin","setServicesMargin","useEffect","getService","then","data","ok","getServicesMargin","console","log","service_margin","message","store","addNotification","danger","error","noValidate","onSubmit","event","preventDefault","form","currentTarget","checkValidity","stopPropagation","margin_by","nominal","updateService","success","push","xs","cols","md","className","htmlFor","defaultValue","category","onChange","e","target","value","fluid","thumbnail","rounded","src","name","width","height","type","required","slug","rows","desc","vendor_slug","vendors","map","vendor","key","toUpperCase","inline","label","defaultChecked","max","disabled","tryParseInt","active","color","variant","onClick","Loader","text","parsed","parseInt","isNaN","API_URL","getServices","searchQuery","marginBy","axios","get","headers","authHeader","response","catch","reason","put","updateServicesMargin"],"mappings":"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","file":"static/js/13.ed92d0fb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CFormTextarea,\n  CImage,\n  CRow,\n} from '@coreui/react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Loader from '../../../components/Loader'\nimport { store } from 'react-notifications-component'\nimport { danger, success } from '../../../helpers/notifications'\nimport { getService, getServicesMargin, updateService } from '../../../api/api_service'\nimport { tryParseInt } from '../../../helpers/utils'\n\nconst ProductPpobDetails = () => {\n  const history = useHistory()\n  const { id } = useParams()\n  const [service, setService] = useState({})\n  const [hasLoaded, setHasLoaded] = useState(false)\n  const [validated, setValidated] = useState(false)\n  const [servicesMargin, setServicesMargin] = useState({})\n\n  const handleEdit = (event) => {\n    event.preventDefault()\n\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n\n    if (form.checkValidity()) {\n      console.log(service)\n      if (service.margin_by === 'all') {\n        service.nominal = servicesMargin.nominal\n      }\n      updateService(id, service).then((data) => {\n        if (data.ok) {\n          console.log(data)\n          store.addNotification(success('PPOB updated successfully.'))\n          history.push('/products/ppob')\n        } else {\n          console.log(data)\n          store.addNotification(danger(data.error))\n        }\n      })\n    }\n  }\n\n  useEffect(\n    () => {\n      getService(id).then((data) => {\n        if (data.ok) {\n          let service = data.data\n          service['vendor_slug'] = service['vendor_slug_selected']\n          delete service['vendor_slug_selected']\n          setService(service)\n          if (!hasLoaded) {\n            getServicesMargin().then((data) => {\n              if (data.ok === true) {\n                console.log(data)\n                setServicesMargin(data.service_margin)\n                setHasLoaded(true)\n              }\n            })\n          }\n        } else {\n          if (data.message) {\n            console.log(data)\n            store.addNotification(danger(data.message))\n          } else {\n            console.log(data)\n            store.addNotification(danger(data.error))\n          }\n        }\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  )\n\n  return hasLoaded ? (\n    <CForm noValidate validated={validated} onSubmit={handleEdit}>\n      <CRow xs={{ cols: 1 }} md={{ cols: 2 }} className=\"mb-4\">\n        <CCol>\n          <CFormLabel htmlFor=\"category\">Category</CFormLabel>\n          <CFormSelect\n            id=\"category\"\n            defaultValue={service.category}\n            onChange={(e) => {\n              setService((service) => ({ ...service, category: e.target.value }))\n            }}\n          >\n            <option value=\"postpaid\">Postpaid</option>\n            <option value=\"prepaid\">Prepaid</option>\n          </CFormSelect>\n          <CContainer fluid className=\"d-flex justify-content-center mt-4 mb-3\">\n            <CImage\n              thumbnail\n              rounded\n              src={'https://via.placeholder.com/550x390.png?text=' + service.name}\n              width={500}\n              height={500}\n            />\n          </CContainer>\n        </CCol>\n        <CCol>\n          <div className=\"mb-2\">\n            <CFormLabel htmlFor=\"name\">PPOB Name</CFormLabel>\n            <CFormInput\n              type=\"text\"\n              id=\"name\"\n              required\n              defaultValue={service.name}\n              onChange={(e) => {\n                setService((service) => ({ ...service, name: e.target.value }))\n              }}\n            />\n          </div>\n          <div className=\"mb-2\">\n            <CFormLabel htmlFor=\"slug\">Slug</CFormLabel>\n            <CFormInput\n              type=\"text\"\n              id=\"slug\"\n              required\n              defaultValue={service.slug}\n              onChange={(e) => {\n                setService((service) => ({ ...service, slug: e.target.value }))\n              }}\n            />\n          </div>\n          <div className=\"mb-2\">\n            <CFormLabel htmlFor=\"description\">Description</CFormLabel>\n            <CFormTextarea\n              type=\"text\"\n              id=\"description\"\n              rows=\"3\"\n              required\n              defaultValue={service.desc}\n              onChange={(e) => {\n                setService((service) => ({ ...service, desc: e.target.value }))\n              }}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <CFormLabel htmlFor=\"vendor\">Vendor</CFormLabel>\n            <CFormSelect\n              id=\"vendor\"\n              defaultValue={service.vendor_slug}\n              onChange={(e) => {\n                setService((service) => ({ ...service, vendor_slug: e.target.value }))\n              }}\n            >\n              {service.vendors.map((vendor, key) => {\n                return (\n                  <option key={key} value={vendor}>\n                    {vendor.toUpperCase()}\n                  </option>\n                )\n              })}\n            </CFormSelect>\n          </div>\n          <h5>Margin by</h5>\n          <CRow xs={{ cols: 1 }} md={{ cols: 2 }} className=\"mb-3 mt-3 align-items-center\">\n            <CCol>\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox1\"\n                value=\"all\"\n                label=\"All (Default)\"\n                defaultChecked={service.margin_by === 'all'}\n                onChange={() => {\n                  setService((service) => ({ ...service, margin_by: 'all' }))\n                }}\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox2\"\n                value=\"percent\"\n                label=\"Percent\"\n                defaultChecked={service.margin_by === 'percent'}\n                onChange={() => {\n                  setService((service) => ({ ...service, margin_by: 'percent' }))\n                }}\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox3\"\n                value=\"fix\"\n                label=\"Fix\"\n                defaultChecked={service.margin_by === 'fix_cost'}\n                onChange={() => {\n                  setService((service) => ({ ...service, margin_by: 'fix_cost' }))\n                }}\n              />\n            </CCol>\n            <CCol>\n              <CFormInput\n                type=\"number\"\n                id=\"nominal\"\n                required\n                max={service.margin_by === 'percent' ? 100 : 100000}\n                value={service.margin_by === 'all' ? '' : service.nominal}\n                disabled={service.margin_by === 'all'}\n                onChange={(e) => {\n                  setService((service) => ({ ...service, nominal: tryParseInt(e.target.value) }))\n                }}\n              />\n            </CCol>\n          </CRow>\n          <CRow className=\"mb-3 align-items-center\">\n            <CCol xs={5}>Retail Price (after margin added)</CCol>\n            <CCol>\n              <CFormInput type=\"text\" id=\"retail_price\" />\n            </CCol>\n          </CRow>\n          <CFormLabel htmlFor=\"status\">Status</CFormLabel>\n          <CFormSelect\n            id=\"status\"\n            defaultValue={service.active}\n            onChange={(e) => {\n              setService((service) => ({\n                ...service,\n                active: e.target.value === 'true',\n              }))\n            }}\n          >\n            <option value=\"true\">Active</option>\n            <option value=\"false\">Inactive</option>\n          </CFormSelect>\n        </CCol>\n      </CRow>\n      <CRow xs={{ cols: 1 }} md={{ cols: 2 }}>\n        <CCol className=\"d-grid d-md-flex justify-content-md-start mb-2\">\n          <CButton\n            color=\"primary\"\n            variant=\"outline\"\n            onClick={() => {\n              history.push('/products/ppob/' + id + '/buy')\n            }}\n          >\n            Buy\n          </CButton>\n        </CCol>\n        <CCol className=\"d-grid d-md-flex justify-content-md-end mb-3\">\n          <CButton color=\"primary\" type=\"submit\">\n            Edit\n          </CButton>\n        </CCol>\n      </CRow>\n    </CForm>\n  ) : (\n    Loader()\n  )\n}\n\nexport default ProductPpobDetails\n","export function tryParseInt(text) {\n  const parsed = parseInt(text)\n  if (isNaN(parsed)) {\n    return ''\n  }\n  return parsed\n}\n","import axios from 'axios'\nimport { authHeader } from './requestHeaders'\n\nconst API_URL = 'https://api.ekoop.id/v01'\n\nexport function getServices(searchQuery, category, active, marginBy) {\n  return axios\n    .get(\n      API_URL +\n        '/transaction/services?search=' +\n        searchQuery +\n        '&category=' +\n        category +\n        '&active=' +\n        active +\n        '&margin_by=' +\n        marginBy,\n      { headers: authHeader() },\n    )\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      console.log(reason)\n    })\n}\n\nexport function getService(id) {\n  return axios\n    .get(API_URL + '/transaction/services/' + id, { headers: authHeader() })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      console.log(reason)\n    })\n}\n\nexport function updateService(id, service) {\n  return axios\n    .put(API_URL + '/transaction/services/' + id, service, {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function getServicesMargin() {\n  return axios\n    .get(API_URL + '/transaction/service_margin', {\n      headers: authHeader(),\n    })\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n\nexport function updateServicesMargin(servicesMargin) {\n  return axios\n    .put(\n      API_URL + '/transaction/service_margin',\n      {\n        margin_by: servicesMargin.margin_by,\n        nominal: servicesMargin.nominal,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n    .then((response) => {\n      return response.data\n    })\n    .catch((reason) => {\n      return reason.response.data\n    })\n}\n"],"sourceRoot":""}